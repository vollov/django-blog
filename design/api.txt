## Sample blog.json

[
    {
        "id": "1",
        "title": "How to write a blog web site with django",
        "body": "## How to write a blog web site with django",
        "views": 0,
        "author": {
            "id": 2,
            "username": "dustin"
        },
        "created_at": "2016-10-23T17:30:14Z"
    },
    {
        "id": "2",
        "title": "How to build a node js blog",
        "body": "How to build a node js blog",
        "views": 0,
        "author": {
            "id": 2,
            "username": "dustin"
        },
        "created_at": "2016-10-24T01:40:23Z"
    }
]

<h3>About</h3>
  <p><small>Thank you for visiting {{site_name}}. {{site_name}} is committed to maintaining the privacy of our visitors in the way we collect, store and use information about them.</small></p>


urlpatterns = [
    #url(r'^enroll/$', views.post_enroll, name='post_enroll'),
    url(r'^(?P<blog_slug>[^/]+)$', views.blog_detail, name='blog_detail'),
]

# class UserSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = User
#         fields = ('id', 'username')
# 
# class BlogSerializer(serializers.ModelSerializer):
#     #author = serializers.StringRelatedField(many=False)
#     #     tracks = serializers.HyperlinkedRelatedField(
#     #         many=True,
#     #         read_only=True,
#     #         view_name='track-detail'
#     #     )
#     author = UserSerializer(many=False, read_only=True)
#     
#     class Meta:
#         model = Blog
#         fields = ('id', 'title', 'body', 'views', 'author', 'created_at')

# class BlogViewSet(ModelViewSet):
#     queryset = Blog.objects.all().order_by('-published')
#     serializer_class = BlogSerializer
# 
# 
# class TagViewSet(ModelViewSet):
#     """
#     API endpoint that allows Tags to be viewed or edited.
#     """
#     queryset = Tag.objects.all()
#     serializer_class = TagSerializer
#     
# class PostTagViewSet(ModelViewSet):
#     """
#     API endpoint that allows Tags to be viewed or edited.
#     """
#     queryset = BlogTag.objects.all()
#     serializer_class = BlogTagSerializer
    
#################################################
# restful API
#################################################
# from rest_framework import status
# from rest_framework.decorators import api_view
# from rest_framework.response import Response
#
# @api_view(['GET',])
# def blog_detail_api(request, blog_slug):
#     """
#     return blog detail as json data
#     """
#     blog = Blog.objects.get(slug=blog_slug)
#     serializer = BlogSerializer(blog, many=False)
#     return Response(serializer.data)
# 
# @api_view(['GET',])
# def blogs_api(request):
#     """
#     return blogs as json data
#     """
#     blogs = Blog.objects.filter(published=True)
#     serializer = BlogSerializer(blogs, many=True)
#     return Response(serializer.data)